/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   paper-input-container.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

export {PaperInputContainer};

/**
 * The `<paper-input-container>` is a container for a `label` and input text styled to match the
 * Anypoint platform styling.
 *
 * ### Styling
 *
 * `<paper-input-field>` provides the following custom properties and mixins for styling:
 *
 * Custom property | Description | Default
 * ----------------|-------------|----------
 * `--paper-input-container` | Mixin applied to the input container | `{}`
 * `--paper-input-container-disabled` | Mixin applied to the disabled container | `{}`
 * `--paper-input-container-border` | Mixin applied to the border element on the left and right hand side of the input | ``
 * `--paper-input-container-border-focused` | Mixin applied to the border element on the left and right hand side of the input | ``
 * `--paper-input-container-border-color` | Color of the right and left border of the input | `--anypoint-color-aluminum4`
 * `--paper-input-container-border-focused-color` | Color of the right and left border of the input when the input is focused | `--anypoint-color-steel2`
 * `--paper-input-container-invalid-color,` | Error color | `--anypoint-color-danger`
 * `--paper-input-container-label-color` | Color of the label | `--anypoint-color-aluminum5`
 * `--paper-input-container-label` | Mixin applied to the label | `{}`
 * `--paper-input-container-label-focus` | Mixin applied to the label when focused | `{}`
 * `--paper-input-container-focus-color` | Color applied to the label and input when focused | `--anypoint-color-aluminum5`
 * `--paper-input-field-prefix` | Mixin applied to any prefix element added to the container | `{}`
 * `--paper-input-field-suffix` | Mixin applied to any suffix element added to the container | `{}`
 * `--paper-input-container-input` | Mixin applied to the input control | ``
 * `--paper-input-container-input-color` | Color of the input control | `--anypoint-color-steel5`
 * `--paper-input-container-input-focus-color` | Color of the input control when focused | `--anypoint-color-steel5`
 * `--paper-input-container-input-background-colol` | Background color of the input element | `#fff`
 * `--paper-input-container-input-focus-background-color` | Background color of the input element when focused | `#fff`
 */
declare class PaperInputContainer extends PolymerElement {
  readonly _valueChangedEvent: any;
  readonly _propertyForValue: any;
  readonly _inputElement: any;
  readonly _inputElementValue: any;

  /**
   * The attribute to listen for value changes on.
   */
  attrForValue: string|null|undefined;

  /**
   * Set to true to auto-validate the input value when it changes.
   */
  autoValidate: boolean|null|undefined;

  /**
   * True if the input is invalid. This property is set automatically when the input value
   * changes if auto-validating, or when the `iron-input-validate` event is heard from a
   * child.
   */
  invalid: boolean|null|undefined;

  /**
   * True if the input has focus.
   */
  readonly focused: boolean|null|undefined;
  _addons: any[]|null|undefined;

  /**
   * A placeholder string in addition to the label. If this is set, the label will always float.
   */
  placeholder: string|null|undefined;
  connectedCallback(): void;
  disconnectedCallback(): void;
  ready(): void;
  _onAddonAttached(event: any): void;
  _onFocus(): void;
  _onBlur(): void;
  _onInput(event: any): void;
  _onValueChanged(event: any): void;
  _handleValue(inputElement: any): void;
  _handleValueAndAutoValidate(inputElement: any): void;
  _onIronInputValidate(): void;
  _invalidChanged(): void;

  /**
   * Call this to update the state of add-ons.
   *
   * @param state Add-on state.
   */
  updateAddons(state: object|null): void;
}

declare global {

  interface HTMLElementTagNameMap {
    "paper-input-container": PaperInputContainer;
  }
}
